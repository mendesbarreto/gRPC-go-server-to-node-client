// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/chuck_norris_fact.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChuckNorrisFactService_GetRandomFact_FullMethodName = "/api.v1.chucknorris.ChuckNorrisFactService/GetRandomFact"
)

// ChuckNorrisFactServiceClient is the client API for ChuckNorrisFactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChuckNorrisFactServiceClient interface {
	GetRandomFact(ctx context.Context, in *GetRandomJokeRequest, opts ...grpc.CallOption) (*GetRandomJokeResponse, error)
}

type chuckNorrisFactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChuckNorrisFactServiceClient(cc grpc.ClientConnInterface) ChuckNorrisFactServiceClient {
	return &chuckNorrisFactServiceClient{cc}
}

func (c *chuckNorrisFactServiceClient) GetRandomFact(ctx context.Context, in *GetRandomJokeRequest, opts ...grpc.CallOption) (*GetRandomJokeResponse, error) {
	out := new(GetRandomJokeResponse)
	err := c.cc.Invoke(ctx, ChuckNorrisFactService_GetRandomFact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChuckNorrisFactServiceServer is the server API for ChuckNorrisFactService service.
// All implementations must embed UnimplementedChuckNorrisFactServiceServer
// for forward compatibility
type ChuckNorrisFactServiceServer interface {
	GetRandomFact(context.Context, *GetRandomJokeRequest) (*GetRandomJokeResponse, error)
	mustEmbedUnimplementedChuckNorrisFactServiceServer()
}

// UnimplementedChuckNorrisFactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChuckNorrisFactServiceServer struct {
}

func (UnimplementedChuckNorrisFactServiceServer) GetRandomFact(context.Context, *GetRandomJokeRequest) (*GetRandomJokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomFact not implemented")
}
func (UnimplementedChuckNorrisFactServiceServer) mustEmbedUnimplementedChuckNorrisFactServiceServer() {
}

// UnsafeChuckNorrisFactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChuckNorrisFactServiceServer will
// result in compilation errors.
type UnsafeChuckNorrisFactServiceServer interface {
	mustEmbedUnimplementedChuckNorrisFactServiceServer()
}

func RegisterChuckNorrisFactServiceServer(s grpc.ServiceRegistrar, srv ChuckNorrisFactServiceServer) {
	s.RegisterService(&ChuckNorrisFactService_ServiceDesc, srv)
}

func _ChuckNorrisFactService_GetRandomFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomJokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuckNorrisFactServiceServer).GetRandomFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChuckNorrisFactService_GetRandomFact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuckNorrisFactServiceServer).GetRandomFact(ctx, req.(*GetRandomJokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChuckNorrisFactService_ServiceDesc is the grpc.ServiceDesc for ChuckNorrisFactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChuckNorrisFactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.chucknorris.ChuckNorrisFactService",
	HandlerType: (*ChuckNorrisFactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomFact",
			Handler:    _ChuckNorrisFactService_GetRandomFact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chuck_norris_fact.proto",
}
